import gradio as gr
from transformers import pipeline, AutoModelForSequenceClassification, AutoTokenizer

# T√ºrk√ße duygu analizi modeli
model_name = "savasy/bert-base-turkish-sentiment-cased"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name)
sentiment_pipeline = pipeline("sentiment-analysis", model=model, tokenizer=tokenizer)

# N√∂tr algƒ±lama i√ßin e≈üik deƒüerleri
STRONG_EMOTION_THRESHOLD = 0.95
WEAK_EMOTION_THRESHOLD = 0.70
NEUTRAL_BOOST_WORDS = [
    'normal', 'normalim', 'tamam', 'evet', 'hayƒ±r', 'belki', 'olabilir',
    'saat', 'bug√ºn', 'yarƒ±n', 'd√ºn', '≈üimdi', 'sonra', '√∂nce',
    'gidiyorum', 'geliyorum', 'geldim', 'gittim',
    'anladƒ±m', 'anlƒ±yorum', 'peki', 'bilmiyorum', 'biliyorum',
    'var', 'yok', 'olmaz', 'olur', 'toplantƒ±', 'i≈ü', 'okul'
]

def analyze_emotion(text):
    if not text.strip():
        return {"Pozitif": 0.0, "Negatif": 0.0, "N√∂tr": 1.0}
    
    # N√∂tr kelime kontrol√º
    text_lower = text.lower().strip()
    for neutral_word in NEUTRAL_BOOST_WORDS:
        if neutral_word in text_lower:
            return {"Pozitif": 0.0, "Negatif": 0.0, "N√∂tr": 1.0}
    
    result = sentiment_pipeline(text)[0]
    label = result["label"]
    score = result["score"]
    
    # √áok d√º≈ü√ºk skor: Kesinlikle n√∂tr
    if score < 0.55:
        return {"Pozitif": 0.0, "Negatif": 0.0, "N√∂tr": 1.0}
    
    # D√º≈ü√ºk-orta skor: √áoƒüunlukla n√∂tr
    if score < WEAK_EMOTION_THRESHOLD:
        emotion_weight = (score - 0.5) / (WEAK_EMOTION_THRESHOLD - 0.5) * 0.4
        neutral_weight = 1.0 - emotion_weight
        
        if label == "positive":
            return {"Pozitif": emotion_weight, "Negatif": 0.0, "N√∂tr": neutral_weight}
        else:
            return {"Pozitif": 0.0, "Negatif": emotion_weight, "N√∂tr": neutral_weight}
    
    # Orta-y√ºksek skor: Karƒ±≈üƒ±k
    if score < STRONG_EMOTION_THRESHOLD:
        emotion_weight = score * 0.7
        neutral_weight = 1.0 - emotion_weight
        
        if label == "positive":
            return {"Pozitif": emotion_weight, "Negatif": 0.0, "N√∂tr": neutral_weight}
        else:
            return {"Pozitif": 0.0, "Negatif": emotion_weight, "N√∂tr": neutral_weight}
    
    # √áok y√ºksek skor: Net duygu
    if label == "positive":
        return {"Pozitif": score, "Negatif": 0.0, "N√∂tr": max(0.0, 1.0 - score)}
    else:
        return {"Pozitif": 0.0, "Negatif": score, "N√∂tr": max(0.0, 1.0 - score)}

# Gradio aray√ºz√º
interface = gr.Interface(
    fn=analyze_emotion,
    inputs=gr.Textbox(
        label="Metin Girin",
        placeholder="Analiz edilecek metni buraya yazƒ±n...",
        lines=3
    ),
    outputs=gr.Label(label="Duygu Analizi Sonucu"),
    title="üé≠ T√ºrk√ße Duygu Analizi",
    description="Metninizin duygusal tonunu analiz eder (Pozitif/Negatif/N√∂tr). BERT tabanlƒ± T√ºrk√ße duygu analizi modeli kullanƒ±r.",
    examples=[
        ["Bu film muhte≈üemdi, √ßok beƒüendim!"],
        ["Maalesef hi√ß beƒüenmedim, √ßok k√∂t√ºyd√º."],
        ["Bug√ºn normal bir g√ºnd√º."],
        ["√áok mutluyum ve heyecanlƒ±yƒ±m!"],
        ["K√∂t√º hissediyorum."],
        ["Saat 3'te toplantƒ± var."],
    ],
    theme=gr.themes.Soft(),
    api_name="predict"
)

if __name__ == "__main__":
    interface.launch()

