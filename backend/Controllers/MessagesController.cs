using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using EmotionAnalyzeApi.Data;
using EmotionAnalyzeApi.Models;
using System.Net.Http;
using System.Text.Json;

namespace EmotionAnalyzeApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class MessagesController : ControllerBase
{
    private readonly ApplicationDbContext _context;
    private readonly IHttpClientFactory _clientFactory;
    private readonly IConfiguration _configuration;

    public MessagesController(
        ApplicationDbContext context,
        IHttpClientFactory clientFactory,
        IConfiguration configuration)
    {
        _context = context;
        _clientFactory = clientFactory;
        _configuration = configuration;
    }

    // GET: api/messages
    [HttpGet]
    public async Task<ActionResult<IEnumerable<Message>>> GetMessages()
    {
        return await _context.Messages
            .Include(m => m.User)
            .OrderBy(m => m.CreatedAt)  // Eski mesajlar √∂nce, yeni mesajlar altta
            .ToListAsync();
    }

    // GET: api/messages/5
    [HttpGet("{id}")]
    public async Task<ActionResult<Message>> GetMessage(int id)
    {
        var message = await _context.Messages
            .Include(m => m.User)
            .FirstOrDefaultAsync(m => m.Id == id);

        if (message == null)
        {
            return NotFound();
        }

        return message;
    }

    // POST: api/messages
    [HttpPost]
    public async Task<ActionResult<Message>> CreateMessage(Message message)
    {
        // Kullanƒ±cƒ±yƒ± kontrol et
        var user = await _context.Users.FindAsync(message.UserId);
        if (user == null)
        {
            return BadRequest("Ge√ßersiz kullanƒ±cƒ± ID'si");
        }

        try
        {
            // Duygu analizi yap
            var emotionScores = await AnalyzeEmotion(message.Content);
            
            // Sonu√ßlarƒ± kaydet
            message.PositiveScore = emotionScores.Pozitif;
            message.NegativeScore = emotionScores.Negatif;
            message.NeutralScore = emotionScores.N√∂tr;
            
            _context.Messages.Add(message);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetMessage), new { id = message.Id }, message);
        }
        catch (Exception ex)
        {
            // Duygu analizi ba≈üarƒ±sƒ±z olsa bile mesajƒ± kaydet
            Console.WriteLine($"[WARNING] ‚ö†Ô∏è Duygu analizi ba≈üarƒ±sƒ±z, mesaj neutral olarak kaydediliyor: {ex.Message}");
            
            message.PositiveScore = 0.33;
            message.NegativeScore = 0.33;
            message.NeutralScore = 0.34;
            
            _context.Messages.Add(message);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetMessage), new { id = message.Id }, message);
        }
    }

    private async Task<EmotionScores> AnalyzeEmotion(string text)
    {
        // Ge√ßici: AI servisi API desteklemiyor, basit kelime analizi yap
        Console.WriteLine($"[INFO] ü§ñ Ge√ßici AI servisi (kelime analizi): {text}");
        
        // T√ºrk√ße duygu kelimeleri
        var positiveWords = new[] { 
            "iyi", "g√ºzel", "harika", "m√ºkemmel", "mutlu", "ne≈üeli", "sevin√ßli",
            "ho≈ü", "memnun", "ba≈üarƒ±lƒ±", "ba≈üarƒ±", "s√ºper", "m√ºthi≈ü", "pozitif"
        };
        
        var negativeWords = new[] { 
            "k√∂t√º", "√ºzg√ºn", "kƒ±zgƒ±n", "sinirli", "berbat", "fena", "√ºz√ºc√º",
            "acƒ±", "h√ºz√ºnl√º", "mutsuz", "√∂fke", "h√ºz√ºn", "k√∂t√º", "berbat"
        };
        
        var neutralWords = new[] {
            "nasƒ±l", "nasƒ±lsƒ±n", "selam", "merhaba", "normal", "ok", "tamam",
            "anladƒ±m", "evet", "hayƒ±r", "belki", "muhtemelen", "iyi"
        };
        
        var lowerText = text.ToLower();
        
        // Kelime sayƒ±larƒ±nƒ± hesapla
        var positiveCount = positiveWords.Count(w => lowerText.Contains(w));
        var negativeCount = negativeWords.Count(w => lowerText.Contains(w));
        var neutralCount = neutralWords.Count(w => lowerText.Contains(w));
        
        Console.WriteLine($"[DEBUG] Pozitif kelimeler: {positiveCount}, Negatif: {negativeCount}, N√∂tr: {neutralCount}");
        
        // Duygu analizi
        if (positiveCount > negativeCount && positiveCount > neutralCount)
        {
            var scores = new EmotionScores { Pozitif = 0.8, Negatif = 0.1, N√∂tr = 0.1 };
            Console.WriteLine($"[SUCCESS] ‚úÖ Pozitif duygu tespit edildi: {text}");
            return scores;
        }
        else if (negativeCount > positiveCount && negativeCount > neutralCount)
        {
            var scores = new EmotionScores { Pozitif = 0.1, Negatif = 0.8, N√∂tr = 0.1 };
            Console.WriteLine($"[SUCCESS] ‚úÖ Negatif duygu tespit edildi: {text}");
            return scores;
        }
        else if (neutralCount > 0 || (positiveCount == negativeCount))
        {
            var scores = new EmotionScores { Pozitif = 0.2, Negatif = 0.2, N√∂tr = 0.6 };
            Console.WriteLine($"[SUCCESS] ‚úÖ N√∂tr duygu tespit edildi: {text}");
            return scores;
        }
        else
        {
            // Varsayƒ±lan: n√∂tr
            var scores = new EmotionScores { Pozitif = 0.33, Negatif = 0.33, N√∂tr = 0.34 };
            Console.WriteLine($"[INFO] ‚ÑπÔ∏è Varsayƒ±lan n√∂tr duygu: {text}");
            return scores;
        }
    }
}

public class EmotionScores
{
    public double Pozitif { get; set; }
    public double Negatif { get; set; }
    public double N√∂tr { get; set; }
}

public class HuggingFaceResponse
{
    public object[][] Data { get; set; }
}

