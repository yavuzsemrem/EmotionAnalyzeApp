using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using EmotionAnalyzeApi.Data;
using EmotionAnalyzeApi.Models;
using System.Net.Http;
using System.Text.Json;

namespace EmotionAnalyzeApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class MessagesController : ControllerBase
{
    private readonly ApplicationDbContext _context;
    private readonly IHttpClientFactory _clientFactory;
    private readonly IConfiguration _configuration;

    public MessagesController(
        ApplicationDbContext context,
        IHttpClientFactory clientFactory,
        IConfiguration configuration)
    {
        _context = context;
        _clientFactory = clientFactory;
        _configuration = configuration;
    }

    // GET: api/messages
    [HttpGet]
    public async Task<ActionResult<IEnumerable<Message>>> GetMessages()
    {
        return await _context.Messages
            .Include(m => m.User)
            .OrderBy(m => m.CreatedAt)  // Eski mesajlar √∂nce, yeni mesajlar altta
            .ToListAsync();
    }

    // GET: api/messages/5
    [HttpGet("{id}")]
    public async Task<ActionResult<Message>> GetMessage(int id)
    {
        var message = await _context.Messages
            .Include(m => m.User)
            .FirstOrDefaultAsync(m => m.Id == id);

        if (message == null)
        {
            return NotFound();
        }

        return message;
    }

    // POST: api/messages
    [HttpPost]
    public async Task<ActionResult<Message>> CreateMessage(Message message)
    {
        // Kullanƒ±cƒ±yƒ± kontrol et
        var user = await _context.Users.FindAsync(message.UserId);
        if (user == null)
        {
            return BadRequest("Ge√ßersiz kullanƒ±cƒ± ID'si");
        }

        try
        {
            // Duygu analizi yap
            var emotionScores = await AnalyzeEmotion(message.Content);
            
            // Sonu√ßlarƒ± kaydet
            message.PositiveScore = emotionScores.Pozitif;
            message.NegativeScore = emotionScores.Negatif;
            message.NeutralScore = emotionScores.N√∂tr;
            
            _context.Messages.Add(message);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetMessage), new { id = message.Id }, message);
        }
        catch (Exception ex)
        {
            // Duygu analizi ba≈üarƒ±sƒ±z olsa bile mesajƒ± kaydet
            Console.WriteLine($"[WARNING] ‚ö†Ô∏è Duygu analizi ba≈üarƒ±sƒ±z, mesaj neutral olarak kaydediliyor: {ex.Message}");
            
            message.PositiveScore = 0.33;
            message.NegativeScore = 0.33;
            message.NeutralScore = 0.34;
            
            _context.Messages.Add(message);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetMessage), new { id = message.Id }, message);
        }
    }

    private async Task<EmotionScores> AnalyzeEmotion(string text)
    {
        // Ge√ßici: AI servisi API desteklemiyor, geli≈ütirilmi≈ü kelime analizi yap
        Console.WriteLine($"[INFO] ü§ñ Ge√ßici AI servisi (kelime analizi): {text}");
        
        // T√ºrk√ße duygu kelimeleri - daha kapsamlƒ±
        var positiveWords = new[] { 
            "iyi", "g√ºzel", "harika", "m√ºkemmel", "mutlu", "ne≈üeli", "sevin√ßli",
            "ho≈ü", "memnun", "ba≈üarƒ±lƒ±", "ba≈üarƒ±", "s√ºper", "m√ºthi≈ü", "pozitif",
            "iyiyim", "iyiyiz", "iyiler", "g√ºzeller", "harikalar", "m√ºkemmeller",
            "mutluyum", "mutluyuz", "mutlular", "ne≈üeliyim", "ne≈üeliyiz", "ne≈üeliler",
            "sevindim", "sevindik", "sevindiler", "ho≈üum", "ho≈üuz", "ho≈ülar",
            "memnunum", "memnunuz", "memnunlar", "ba≈üarƒ±lƒ±yƒ±m", "ba≈üarƒ±lƒ±yƒ±z", "ba≈üarƒ±lƒ±lar"
        };
        
        var negativeWords = new[] { 
            "k√∂t√º", "√ºzg√ºn", "kƒ±zgƒ±n", "sinirli", "berbat", "fena", "√ºz√ºc√º",
            "acƒ±", "h√ºz√ºnl√º", "mutsuz", "√∂fke", "h√ºz√ºn", "k√∂t√ºy√ºm", "k√∂t√ºy√ºz", "k√∂t√ºler",
            "√ºzg√ºn√ºm", "√ºzg√ºn√ºz", "√ºzg√ºnler", "kƒ±zgƒ±nƒ±m", "kƒ±zgƒ±nƒ±z", "kƒ±zgƒ±nlar",
            "sinirliyim", "sinirliyiz", "sinirliler", "berbatƒ±m", "berbatƒ±z", "berbatlar",
            "fenayƒ±m", "fenayƒ±z", "fenalar", "√ºz√ºc√ºy√ºm", "√ºz√ºc√ºy√ºz", "√ºz√ºc√ºler",
            "acƒ±yƒ±m", "acƒ±yƒ±z", "acƒ±lar", "h√ºz√ºnl√ºy√ºm", "h√ºz√ºnl√ºy√ºz", "h√ºz√ºnl√ºler",
            "mutsuzum", "mutsuzuz", "mutsuzlar", "√∂fkeli", "√∂fkeliyim", "√∂fkeliyiz", "√∂fkeliler"
        };
        
        var neutralWords = new[] {
            "nasƒ±l", "nasƒ±lsƒ±n", "selam", "merhaba", "normal", "ok", "tamam",
            "anladƒ±m", "evet", "hayƒ±r", "belki", "muhtemelen", "nasƒ±lsƒ±nƒ±z",
            "selamlar", "merhabalar", "normaller", "okay", "tamamlar", "anladƒ±k",
            "evetler", "hayƒ±rlar", "belkiler", "muhtemelenler"
        };
        
        var lowerText = text.ToLower().Trim();
        
        // Kelime sayƒ±larƒ±nƒ± hesapla
        var positiveCount = positiveWords.Count(w => lowerText.Contains(w));
        var negativeCount = negativeWords.Count(w => lowerText.Contains(w));
        var neutralCount = neutralWords.Count(w => lowerText.Contains(w));
        
        Console.WriteLine($"[DEBUG] Pozitif kelimeler: {positiveCount}, Negatif: {negativeCount}, N√∂tr: {neutralCount}");
        
        // Toplam kelime sayƒ±sƒ±
        var totalWords = positiveCount + negativeCount + neutralCount;
        
        // Duygu analizi - daha akƒ±llƒ± algoritma
        if (totalWords == 0)
        {
            // Hi√ß duygu kelimesi yoksa n√∂tr
            var scores = new EmotionScores { Pozitif = 0.33, Negatif = 0.33, N√∂tr = 0.34 };
            Console.WriteLine($"[INFO] ‚ÑπÔ∏è Duygu kelimesi bulunamadƒ±, varsayƒ±lan n√∂tr: {text}");
            return scores;
        }
        
        // En y√ºksek skorlu duygu t√ºr√ºn√º bul
        var maxCount = Math.Max(positiveCount, Math.Max(negativeCount, neutralCount));
        
        if (positiveCount == maxCount && positiveCount > 0)
        {
            // Pozitif duygu - dinamik skorlama
            var positiveRatio = (double)positiveCount / totalWords;
            var positiveScore = Math.Min(0.9, 0.5 + (positiveRatio * 0.4)); // 0.5-0.9 arasƒ±
            var remainingScore = 1.0 - positiveScore;
            var negativeScore = remainingScore * 0.2; // %20 negatif
            var neutralScore = remainingScore * 0.8; // %80 n√∂tr
            
            var scores = new EmotionScores { 
                Pozitif = positiveScore, 
                Negatif = negativeScore, 
                N√∂tr = neutralScore 
            };
            Console.WriteLine($"[SUCCESS] ‚úÖ Pozitif duygu tespit edildi: {text} (Pozitif: {positiveScore:P0})");
            return scores;
        }
        else if (negativeCount == maxCount && negativeCount > 0)
        {
            // Negatif duygu - dinamik skorlama
            var negativeRatio = (double)negativeCount / totalWords;
            var negativeScore = Math.Min(0.9, 0.5 + (negativeRatio * 0.4)); // 0.5-0.9 arasƒ±
            var remainingScore = 1.0 - negativeScore;
            var positiveScore = remainingScore * 0.2; // %20 pozitif
            var neutralScore = remainingScore * 0.8; // %80 n√∂tr
            
            var scores = new EmotionScores { 
                Pozitif = positiveScore, 
                Negatif = negativeScore, 
                N√∂tr = neutralScore 
            };
            Console.WriteLine($"[SUCCESS] ‚úÖ Negatif duygu tespit edildi: {text} (Negatif: {negativeScore:P0})");
            return scores;
        }
        else
        {
            // N√∂tr duygu - dinamik skorlama
            var neutralRatio = (double)neutralCount / totalWords;
            var neutralScore = Math.Min(0.8, 0.4 + (neutralRatio * 0.4)); // 0.4-0.8 arasƒ±
            var remainingScore = 1.0 - neutralScore;
            var positiveScore = remainingScore * 0.5; // %50 pozitif
            var negativeScore = remainingScore * 0.5; // %50 negatif
            
            var scores = new EmotionScores { 
                Pozitif = positiveScore, 
                Negatif = negativeScore, 
                N√∂tr = neutralScore 
            };
            Console.WriteLine($"[SUCCESS] ‚úÖ N√∂tr duygu tespit edildi: {text} (N√∂tr: {neutralScore:P0})");
            return scores;
        }
    }
}

public class EmotionScores
{
    public double Pozitif { get; set; }
    public double Negatif { get; set; }
    public double N√∂tr { get; set; }
}

public class HuggingFaceResponse
{
    public object[][] Data { get; set; }
}

